source [find artik05x-usb-ftdi.cfg]
source [find s5jt200.cfg]
source [find partition_map.cfg]
source [find mem_helper.tcl]

reset_config trst_and_srst srst_push_pull trst_push_pull

adapter_nsrst_assert_width 50
adapter_nsrst_delay 100

# to suppress warnings (should be removed later)
debug_level -1

proc cmu_init {} {
	mww 0x80081818 0x00000002
	mww 0x8008181c 0x00000001
	mww 0x80081814 0x00000001
	mww 0x80081804 0x00000000
	mww 0x80081808 0x00000000
	mww 0x8008180c 0x00000000
	mww 0x80081810 0x00000000
	mww 0x80081800 0x00000003
	mww 0x80080000 0x007f0000
	mww 0x80080004 0x03104000
	mww 0x80080014 0x1071bf00
	mww 0x80081000 0x00000000
	mww 0x8008100c 0x00000000
	mww 0x80080180 0x00000010
}

proc wdt_disable {} {
	mww 0x80030000 0x00000000
}

proc mpu_init {} {
	arm mcr 15 0 6 2 0 0x0
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x1
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x2
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x3
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x4
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x5
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x6
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x7
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x8
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x9
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0xA
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0xB
	arm mcr 15 0 6 1 2 0x8

	arm mcr 15 0 6 2 0 0x0
	arm mcr 15 0 6 1 4 0x300
	arm mcr 15 0 6 1 2 0x3F
	arm mcr 15 0 6 1 0 0x0

	arm mcr 15 0 6 2 0 0x1
	arm mcr 15 0 6 1 4 0x0104
	arm mcr 15 0 6 1 2 0x37
	arm mcr 15 0 6 1 0 0x80000000

	arm mcr 15 0 6 2 0 0x4
	arm mcr 15 0 6 1 4 0x300
	arm mcr 15 0 6 1 2 0x3F
	arm mcr 15 0 6 1 0 0x60000000

	arm mcr 15 0 1 0 0 0x00e50879
}

proc flash_enable_write {} {
	set sfcon [expr [mrw 0x80310004] | (1 << 31)]
	mww 0x80310004 $sfcon
}

proc flash_disable_write {} {
	set sfcon [expr [mrw 0x80310004] & ~(1 << 31)]
	mww 0x80310004 $sfcon
}

proc flash_read_status {} {
	return [mrb 0x803100dc]
}

proc flash_is_busy {} {
	set status [flash_read_status]
	return [expr ($status & 0x1) != 0]
}

proc flash_poll {} {
	while { [flash_is_busy] } {
		sleep 10
	}
}

proc prepare_target {} {
	init
	catch { reset halt }

	wdt_disable
	cmu_init
	mpu_init
}

proc flash_chiperase {} {
	prepare_target

	# clear erase_wait bit if it is set
	set sfcon [expr [mrw 0x80310004] & ~(1 << 4)]
	mww 0x80310004 $sfcon

	if { ([flash_read_status] & (1 << 7)) != 0 } {
		echo "Flash write-protected"
		return
	}

	echo "Erasing flash (chiperase)..."
	flash_enable_write
	mwb 0x803100CE 0xFF
	flash_disable_write

	flash_poll
}
add_help_text flash_chiperase "Erase the entire flash (chiperase)."

proc flash_erase {start size {opt ""}} {
	prepare_target
	set flash_base 0x04000000
	set offset [expr $start - $flash_base]
	if { ($offset + $size) > 0x800000 } {
		error "Invalid range."
	} elseif { ($offset & 0xfff) != 0 } {
		error "Start address is not aligned to sector boundary."
	} elseif { ($size & 0xfff) != 0 } {
		error "Size is not aligned to sector boundary."
	}
	flash_enable_write
	while { $size } {
		if { ($offset & 0xffff) == 0 && ($size > 0x10000) } {
			set cmd 0x803100BE
			set unit 0x10000
		} else {
			set cmd 0x8031005E
			set unit 0x1000
		}

		mww 0x80310010 $offset
		mwb $cmd 0xff

		if { [string compare -nocase $opt "-silent"] != 0 } {
			echo [format "Erasing flash: 0x%08x" $offset]
		}

		set offset [expr $offset + $unit]
		set size [expr $size - $unit]
		flash_poll
	}
	flash_disable_write
}
add_usage_text flash_erase "address size"
add_help_text flash_erase "Erase flash region specified."

proc flash_protect {mode} {
	prepare_target
	if { $mode == "on" || $mode == "off" } {
		flash_enable_write
		mwb 0x803100EE 0x1
		mww 0x80310018 0xFF000000
		mww 0x80310018 0x00550000
		mww 0x80310018 0x00550300
		if { $mode == "on" } {
			mww 0x80310018 0x0055F000
			mww 0x80310018 0x00553000
		} elseif { $mode == "off" } {
			mww 0x80310018 0x00553000
			mww 0x80310018 0x00550000
		}
		mww 0x80310018 0x00550000
		mww 0x80310018 0x0055C000
		mww 0x80310018 0xFF000000
		flash_disable_write
	} else {
		error "Invalid parameter specified"
	}
}
add_usage_text flash_protect "{on|off}"
add_help_text flash_protect "Set or unset write protection on flash"

proc get_partition { name } {
	global partition_list
	dict get $partition_list $name
}

proc partition_desc { name } { lindex [get_partition $name] 0 }
proc partition_start { name } { lindex [get_partition $name] 1 }
proc partition_size { name } { lindex [get_partition $name] 2 }
proc partition_ro { name } { lindex [get_partition $name] 3 }

proc flash_list_partitions { } {
	global partition_list
	set fstr "%-10s  %-12s  %-12s  %s"
	echo [format $fstr Name Start Size Description]
	echo "----------------------------------------------------------------"
	for {set i 0} {$i < [llength $partition_list]} {incr i 2} {
		set key [lindex $partition_list $i]
		echo [format $fstr $key [partition_start $key] [partition_size $key] [partition_desc $key]]
	}
}
add_help_text flash_list_partitions "List partitions"

proc flash_write {partition file {opt ""}} {
	prepare_target

	set desc [partition_desc $partition]
	set start [partition_start $partition]
	set size [partition_size $partition]

	echo "Flashing $file to '$desc' partition at $start..."

	flash_erase $start $size -silent
	flash_enable_write
	load_image $file $start
	flash_disable_write

	if { [string compare -nocase $opt "verify"] == 0 } {
		reset halt
		verify_image $file $start bin
	}
}
add_usage_text flash_write "partition file"
add_help_text flash_write "Erase the specified partition and write file to it"

proc flash_erase_part { partition } {
	prepare_target

	if { [string compare -nocase $partition "all"] == 0 } {
		global partition_list
		echo "All R/W partitions are selected to be erased."
		for {set i 0} {$i < [llength $partition_list]} {incr i 2} {
			set key [lindex $partition_list $i]
			if { [partition_ro $key] == 0 } {
				flash_erase_part $key
			}
		}
	} else {
		set desc [partition_desc $partition]
		set start [partition_start $partition]
		set size [partition_size $partition]

		echo "Erasing partition '$desc' at $start..."
		flash_erase $start $size -silent
	}
}
add_usage_text flash_erase_part "{partition|all}"
add_help_text flash_erase_part "Erase a partition. If specified 'all', all r/w partitions are erased."
