#******************************************************************
#
# Copyright 2016 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# Notification Service build script
##

import platform
Import('env')

if env.get('RELEASE'):
	env.AppendUnique(CCFLAGS = ['-Os'])
	env.AppendUnique(CPPDEFINES = ['NDEBUG'])
else:
	env.AppendUnique(CCFLAGS = ['-g'])

if env.get('LOGGING'):
	env.AppendUnique(CPPDEFINES = ['TB_LOG'])

lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')
notification_env = lib_env.Clone()

target_os = env.get('TARGET_OS')
######################################################################
# Build flags
######################################################################
notification_env.AppendUnique(CPPPATH = ['include'])
notification_env.AppendUnique(CPPPATH = ['src/common'])
notification_env.AppendUnique(CPPPATH = ['src/provider'])
notification_env.AppendUnique(CPPPATH = ['src/consumer'])
notification_env.AppendUnique(CPPPATH = ['../../resource/csdk/stack/include'])
notification_env.AppendUnique(CPPPATH = ['../../resource/csdk/resource-directory/include'])
notification_env.AppendUnique(CPPPATH = ['../../resource/csdk/connectivity/api'])

if target_os == 'tizenrt':
        notification_env.PrependUnique(LIBS = ['octbstack', 'connectivity_abstraction', 'libcoap', 'resource_directory'])
else:
        notification_env.PrependUnique(LIBS = [
                'octbstack',
                'oc_logger',
                'connectivity_abstraction',
                'libcoap',
                'resource_directory'
        ])



if target_os not in ['windows', 'winrt']:
	notification_env.AppendUnique(CCFLAGS = ['-O2', '-g', '-Wall', '-fmessage-length=0'])

if target_os not in ['darwin', 'ios', 'windows', 'winrt']:
	notification_env.AppendUnique(LINKFLAGS = ['-Wl,--no-undefined'])

if target_os == 'linux':
	notification_env.AppendUnique(LIBS = ['pthread'])
	if not env.get('RELEASE'):
		notification_env.PrependUnique(LIBS = ['gcov'])
		notification_env.AppendUnique(CCFLAGS = ['--coverage'])

if target_os == 'android':
	notification_env.AppendUnique(CCFLAGS = ['-frtti', '-fexceptions'])
	notification_env.AppendUnique(LIBS = ['gnustl_shared','log'])

	if not env.get('RELEASE'):
		notification_env.AppendUnique(LIBS = ['log'])

if target_os == 'tizen':
	notification_env.AppendUnique(CPPDEFINES = ['__TIZEN__'])
	# notification_env.ParseConfig('pkg-config --cflags --libs sqlite3')

if target_os == 'ios':
	if 'CLIENT' in notification_env.get('RD_MODE'):
		notification_env.AppendUnique(CPPDEFINES = ['RD_CLIENT'])

if env.get('WITH_CLOUD') == True:
	notification_env.AppendUnique(CPPDEFINES = ['WITH_CLOUD'])

if env.get('SECURED') == '1':
	notification_env.AppendUnique(CPPDEFINES = ['SECURED'])

with_mq = env.get('WITH_MQ')
if 'SUB' in with_mq:
    notification_env.AppendUnique(CPPDEFINES = ['MQ_SUBSCRIBER', 'WITH_MQ'])
    print "MQ SUB support"

if 'PUB' in with_mq:
    notification_env.AppendUnique(CPPDEFINES = ['MQ_PUBLISHER', 'WITH_MQ'])
    print "MQ PUB support"

if 'BROKER' in with_mq:
    notification_env.AppendUnique(CPPDEFINES = ['MQ_BROKER', 'WITH_MQ'])
    print "MQ Broker support"


######################################################################
# Source files and Targets
######################################################################
notification_provider_env = notification_env.Clone()
notification_consumer_env = notification_env.Clone()

if target_os == 'android':
	notification_provider_env.AppendUnique(LINKFLAGS = ['-Wl,-soname,libnotification_provider.so'])
if target_os == 'android':
	notification_consumer_env.AppendUnique(LINKFLAGS = ['-Wl,-soname,libnotification_consumer.so'])

notification_common_obj = notification_provider_env.SharedObject(env.Glob('src/common/*.c'))

notification_provider_src = [
	env.Glob('src/provider/*.c'), notification_common_obj]
notification_consumer_src = [
	env.Glob('src/consumer/*.c'), notification_common_obj]

#if target_os not in ['ios']:
if target_os not in ['ios', 'tizenrt']:
    providersdk = notification_provider_env.SharedLibrary('notification_provider', notification_provider_src)
    notification_provider_env.InstallTarget(providersdk, 'libnotification_provider')
    notification_provider_env.UserInstallTargetLib(providersdk, 'libnotification_provider')
    consumersdk = notification_consumer_env.SharedLibrary('notification_consumer', notification_consumer_src)
    notification_consumer_env.InstallTarget(consumersdk, 'libnotification_consumer')
    notification_consumer_env.UserInstallTargetLib(consumersdk, 'libnotification_consumer')

providersdk = notification_provider_env.StaticLibrary('notification_provider', notification_provider_src)
notification_provider_env.InstallTarget(providersdk, 'libnotification_provider')
notification_provider_env.UserInstallTargetLib(providersdk, 'libnotification_provider')

if target_os != 'tizenrt':
    consumersdk = notification_consumer_env.StaticLibrary('notification_consumer', notification_consumer_src)
    notification_consumer_env.InstallTarget(consumersdk, 'libnotification_consumer')
    notification_consumer_env.UserInstallTargetLib(consumersdk, 'libnotification_consumer')

notification_provider_env.UserInstallTargetHeader('include/NSProviderInterface.h',\
	'service/notification', 'NSProviderInterface.h')

if target_os != 'tizenrt':
    notification_consumer_env.UserInstallTargetHeader('include/NSConsumerInterface.h',\
                                                         'service/notification', 'NSConsumerInterface.h')
    notification_consumer_env.UserInstallTargetHeader('include/NSCommon.h',\
                                                          'service/notification', 'NSCommon.h')


# Go to build Unit test
if target_os == 'linux':
    SConscript('unittest/SConscript')

# Go to build c++ wrapper
if target_os != 'tizenrt':
        SConscript('cpp-wrapper/SConscript')

if target_os == 'android':
    SConscript('android/SConscript')

# Go to build sample apps
#SConscript('examples/SConscript')
